name: Build & Deploy Frontend (GHCR + Webhook)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ixora-frontend
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}  # <-- expose digest to next job
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=prod
            type=sha,format=short

      # Build & push; capture output digest
      - id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trigger-webhook:
    runs-on: ubuntu-latest
    needs: build-and-push
    concurrency:
      group: deploy-frontend
      cancel-in-progress: true
    steps:
      - name: Trigger aaPanel frontend webhook (retry up to 5 times)
        env:
          WEBHOOK_BASE: ${{ secrets.AAPANEL_WEBHOOK_FRONTEND }}
          DIGEST: ${{ needs.build-and-push.outputs.digest }}
        run: |
          set -e
          if [ -z "${WEBHOOK_BASE}" ]; then
            echo "AAPANEL_WEBHOOK_FRONTEND not set"; exit 1;
          fi
          URL="$WEBHOOK_BASE"
          if [ -n "${DIGEST}" ]; then
            if echo "$URL" | grep -q '?'; then URL="$URL&digest=${DIGEST}"; else URL="$URL?digest=${DIGEST}"; fi
          fi

          for i in {1..5}; do
            echo "GET ${URL} (attempt $i/5)"
            if curl -fsSL --connect-timeout 20 --max-time 120 "$URL"; then
              echo "Webhook OK"; exit 0
            fi
            echo "Retrying in 8s..."
            sleep 8
          done
          echo "Webhook failed after retries" >&2
          exit 1
